{"task_id": "HumanEval/10", "completion": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[i:] + string[:i][::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum2([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum2([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum3(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum3([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum3([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum4(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum4([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum4([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum5(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum5([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum5([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum6(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum6([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum6([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum7(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum7([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum7([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum8(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum8([2, 3, 4, 1, 2, 4]) == 17\n    maxSubArraySum8([-1, -2, -3]) == -1\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef maxSubArraySum9(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSub"}
{"task_id": "HumanEval/23", "completion": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    return 1 + strlen(string[1:])\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reverse of given string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    if string == '':\n        return ''\n    return strrev(string[1:]) + string[0]\n\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if string1 == string2,\n    -1 if string1 < string2 and\n    1 if string1 > string2\n    >>> strcmp('', '')\n    0\n    >>> strcmp('a', '')\n    1\n    >>> strcmp('', 'a')\n    -1\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('a', 'abc')\n    -1\n    >>> strcmp('abc', 'a')\n    1\n    \"\"\"\n    if string1 == string2:\n        return 0\n    if string1 == '':\n        return -1\n    if string2 == '':\n        return 1\n    if string1[0] < string2[0]:\n        return -1\n    if string1[0] > string2[0]:\n        return 1\n    return strcmp(string1[1:], string2[1:])\n\n\ndef strfind(string: str, substring: str) -> int:\n    \"\"\" Return index of first occurrence of substring in string\n    or -1 if substring is not part of string\n    >>> strfind('', '')\n    0\n    >>> strfind('abc', '')\n    0\n    >>> strfind('', 'abc')\n    -1\n    >>> strfind('abc', 'a')\n    0\n    >>> strfind('abc', 'b')\n    1\n    >>> strfind('abc', 'c')\n    2\n    >>> strfind('abc', 'd')\n    -1\n    \"\"\"\n    if substring == '':\n        return 0\n    if string == '':\n        return -1\n    if string[0] == substring[0]:\n        if strfind(string[1:], substring[1:]) == -1:\n            return -1\n        return 1 + strfind(string[1:], substring[1:])\n    if strfind(string[1:], substring) == -1:\n        return -1\n    return 1 + strfind(string[1:], substring)\n\n\ndef strrfind(string: str, substring: str) -> int:\n    \"\"\" Return index of last occurrence of substring in string\n    or -1 if substring is not part of string\n    >>> strrfind('', '')\n    0\n    >>> strrfind('abc', '')\n    3\n    >>> strrfind('', 'abc')\n    -1\n    >>> strrfind('abcabc', 'a')\n    3\n    >>> strrfind('abcabc', 'b')\n    4\n    >>> strrfind('abcabc', 'c')\n    5\n    >>> strrfind('abcabc', 'd')\n    -1\n    \"\"\"\n    if substring == '':\n        return len(string)\n    if string == '':\n        return -1\n    if string[-1] == substring[-1]:\n        if strrfind(string[:-1], substring[:-1]) == -1:\n            return -1\n        return strrfind(string[:-1], substring[:-1]) - 1\n    if strrfind(string[:-1], substring) == -1:\n        return -1\n    return strrfind(string[:-1], substring)\n\n\ndef strsub(string: str, start: int, length: int) -> str:\n    \"\"\" Return substring of given string\n    starting at index start and having length length\n    >>> strsub('', 0, 0)\n    ''\n    >>> strsub('abc', 0, 0)\n    ''\n    >>>"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) * digits(n // 10)\n\n\ndef is_prime(n):\n    \"\"\"Return True if n is a prime number and False otherwise.\n    \"\"\"\n    if n == 1:\n        return False\n    else:\n        return is_prime_helper(n, 2)\n\n\ndef is_prime_helper(n, i):\n    \"\"\"Return True if n is a prime number and False otherwise.\n    \"\"\"\n    if i == n:\n        return True\n    elif n % i == 0:\n        return False\n    else:\n        return is_prime_helper(n, i + 1)\n\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n    print(is_prime(1))\n    print(is_prime(4))\n    print(is_prime(235))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            array[0], array[1] = array[1], array[0]\n        return array\n    if array[0] > array[1]:\n        array[0], array[1] = array[1], array[0]\n    if array[0] > array[2]:\n        array[0], array[2] = array[2], array[0]\n    if array[1] > array[2]:\n        array[1], array[2] = array[2], array[1]\n    return array\n\n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            array[0], array[1] = array[1], array[0]\n        return array\n    if array[0] > array[1]:\n        array[0], array[1] = array[1], array[0]\n    if array[0] > array[2]:\n        array[0], array[2] = array[2], array[0]\n    if array[1] > array[2]:\n        array[1], array[2] = array[2], array[1]\n    return array\n\n\ndef sort_array_3(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    lst1.sort()\n    lst2.sort()\n    if lst1[0] % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/34", "completion": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_in_place(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_3(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_4(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_5(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_6(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_7(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_8(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_8([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\ndef unique_in_place_9(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_place_9([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key="}
{"task_id": "HumanEval/62", "completion": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [3, 1, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [1, 2, 3]\n    \"\"\"\n    return xs\n\n\ndef add(xs: list, ys: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     ys represent coefficients of a polynomial.\n    ys[0] + ys[1] * x + ys[2] * x^2 + ....\n     Return coefficients of the sum of two polynomials.\n    >>> add([3, 1, 2, 4, 5], [1, 2, 3])\n    [4, 3, 5, 7, 8]\n    >>> add([1, 2, 3], [1, 2, 3])\n    [2, 4, 6]\n    \"\"\"\n    if len(xs) > len(ys):\n        return [xs[i] + ys[i] for i in range(len(ys))] + xs[len(ys):]\n    else:\n        return [xs[i] + ys[i] for i in range(len(xs))] + ys[len(xs):]\n\n\ndef sub(xs: list, ys: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     ys represent coefficients of a polynomial.\n    ys[0] + ys[1] * x + ys[2] * x^2 + ....\n     Return coefficients of the difference of two polynomials.\n    >>> sub([3, 1, 2, 4, 5], [1, 2, 3])\n    [2, -1, -1, 0, 2]\n    >>> sub([1, 2, 3], [1, 2, 3])\n    [0]\n    \"\"\"\n    if len(xs) > len(ys):\n        return [xs[i] - ys[i] for i in range(len(ys))] + xs[len(ys):]\n    else:\n        return [xs[i] - ys[i] for i in range(len(xs))] + [-y for y in ys[len(xs):]]\n\n\ndef mul(xs: list, ys: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     ys represent coefficients of a polynomial.\n    ys[0] + ys[1] * x + ys[2] * x^2 + ....\n     Return coefficients of the product of two polynomials.\n    >>> mul([3, 1, 2, 4, 5], [1, 2, 3])\n    [3, 7, 17, 39, 77, 147, 251]\n    >>> mul([1, 2, 3], [1, 2, 3])\n    [1, 4, 10, 12, 9]\n    \"\"\"\n   "}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return lst[::-1]\n    if len(lst) == 3:\n        return lst[::-1]\n    if len(lst) == 4:\n        return lst[::-1]\n    if len(lst) == 5:\n        return lst[::-1]\n    if len(lst) == 6:\n        return lst[::-1]\n    if len(lst) == 7:\n        return lst[::-1]\n    if len(lst) == 8:\n        return lst[::-1]\n    if len(lst) == 9:\n        return lst[::-1]\n    if len(lst) == 10:\n        return lst[::-1]\n    if len(lst) == 11:\n        return lst[::-1]\n    if len(lst) == 12:\n        return lst[::-1]\n    if len(lst) == 13:\n        return lst[::-1]\n    if len(lst) == 14:\n        return lst[::-1]\n    if len(lst) == 15:\n        return lst[::-1]\n    if len(lst) == 16:\n        return lst[::-1]\n    if len(lst) == 17:\n        return lst[::-1]\n    if len(lst) == 18:\n        return lst[::-1]\n    if len(lst) == 19:\n        return lst[::-1]\n    if len(lst) == 20:\n        return lst[::-1]\n    if len(lst) == 21:\n        return lst[::-1]\n    if len(lst) == 22:\n        return lst[::-1]\n    if len(lst) == 23:\n        return lst[::-1]\n    if len(lst) == 24:\n        return lst[::-1]\n    if len(lst) == 25:\n        return lst[::-1]\n    if len(lst) == 26:\n        return lst[::-1]\n    if len(lst) == 27:\n        return lst[::-1]\n    if len(lst) == 28:\n        return lst[::-1]\n    if len(lst) == 29:\n        return lst[::-1]\n    if len(lst) == 30:\n        return lst[::-1]\n    if len(lst) == 31:\n        return lst[::-1]\n    if len(lst) == 32:\n        return lst[::-1]\n    if len(lst) == 33:\n        return lst[::-1]\n    if len(lst) == 34:"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # TODO: Implement me\n    return 0\n\n\ndef max_fill_2(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 110^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # TODO: Implement me\n    return 0"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/56", "completion": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # TODO: implement this function\n    # Hint: Use a stack\n    # Hint: Use a for loop\n    # Hint: Use the len() function\n    # Hint: Use the range() function\n    # Hint: Use the in operator\n    # Hint: Use the not operator\n    # Hint: Use the and operator\n    # Hint: Use the or operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint: Use the not operator\n    # Hint"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with .\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with .\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n   "}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_2(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_3(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_4(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_5(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_6(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_7(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_8(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_9(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_10(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\n\ndef is_multiply_prime_11(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing"}
{"task_id": "HumanEval/55", "completion": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(n-2):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/52", "completion": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 1)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i <= t:\n            return False\n    return True\n\n\ndef below_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_v2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef above_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold_v2([1, 2, 4, 10], 1)\n    True\n    >>> above_threshold_v2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i <= t:\n            return False\n    return True\n\n\ndef below_threshold_v3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v3([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_v3([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef above_threshold_v3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold_v3([1, 2, 4, 10], 1)\n    True\n    >>> above_threshold_v3([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i <= t:\n            return False\n    return True\n\n\ndef below_threshold_v4(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v4([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_v4([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef above_threshold_v4(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold_v4([1, 2, 4, 10], 1)\n    True\n    >>> above_threshold_v4([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i <= t:\n            return False\n    return True\n\n\ndef below_threshold_v5(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v5([1, 2, 4, 10], 10"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Write your code here\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Write your code here\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Write your code here\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Write your code here\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle_5(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Write your code here\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle_6(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string, with each character representing a binary number. Each\n    character in the string will be '0' or '1'.\n\n    Your task is to convert the binary string to a decimal number.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n    binary = binary[2:-2]\n    return int(binary, 2)\n\n\ndef decimal_to_hexadecimal(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character representing a\n    hexadecimal number. Each character in the string will be a digit from '0' to '9' or a letter\n    from 'A' to 'F'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_hexadecimal(15)   # returns \"db0Fdb\"\n    decimal_to_hexadecimal(32)   # returns \"db20db\"\n    \"\"\"\n    hexadecimal = hex(decimal)[2:]\n    return f\"db{hexadecimal}db\"\n\n\ndef hexadecimal_to_decimal(hexadecimal):\n    \"\"\"You will be given a string, with each character representing a hexadecimal number. Each\n    character in the string will be a digit from '0' to '9' or a letter from 'A' to 'F'.\n\n    Your task is to convert the hexadecimal string to a decimal number.\n\n    Examples:\n    hexadecimal_to_decimal(\"db0Fdb\")   # returns 15\n    hexadecimal_to_decimal(\"db20db\")   # returns 32\n    \"\"\"\n    hexadecimal = hexadecimal[2:-2]\n    return int(hexadecimal, 16)\n\n\ndef decimal_to_octal(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    octal format. The function should return a string, with each character representing an octal\n    number. Each character in the string will be a digit from '0' to '7'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_octal(15)   # returns \"db17db\"\n    decimal_to_octal(32)   # returns \"db40db\"\n    \"\"\"\n    octal = oct(decimal)[2:]\n    return f\"db{octal}db\"\n\n\ndef octal_to_decimal(octal):\n    \"\"\"You will be given a string, with each character representing an octal number. Each\n    character in the string will be a digit from '0' to '7'.\n\n    Your task is to convert the octal string to a decimal number.\n\n    Examples:\n    octal_to_decimal(\"db17db\")   # returns 15\n    octal_to_decimal(\"db40db\")   # returns 32\n    \"\"\"\n    octal = octal[2:-2"}
